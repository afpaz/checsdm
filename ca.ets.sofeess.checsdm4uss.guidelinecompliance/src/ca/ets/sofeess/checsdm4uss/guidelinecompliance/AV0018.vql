/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import epackage "http://www.etsmtl.ca/sofeess/breesse/simulink/1.0"

/*
 * Guideline			av_0018: Data type of Simulink Inports and Outports
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				Simulink
 * 
 * Prerequisites		None
 * 
 * Description		The data type of Simulink Inports and Outports must be set. The data type cannot be inherited or auto.
 * 
 * Rationale			Finding matches between UML, Simulink and Stateflow models relies on data types.
 * 
 */

@Constraint(targetEditorId = "ca.ets.sofeess.breesse.simulink.presentation.SimulinkEditorID",
	severity = "error",
	message = "[av_0018] The data type of the port $port$ must be set. It cannot be inherited or auto.",
	key = {port}
) // Find ports with an invalid data type
pattern simulinkPortDataTypeInvalid(port : Port) {
	Port.dataType(port, dataType);
	check (
		dataType.matches("(Inherit|inherited|auto)")	// inherited or auto data types are invalid
	);
}

@Constraint(targetEditorId = "ca.ets.sofeess.breesse.simulink.presentation.SimulinkEditorID",
	severity = "error",
	message = "[av_0018] The data type of the port $port$ must be set.",
	key = {port}
) // Find ports with an unset data type
pattern simulinkPortDataTypeUnset(port : Port) {
	neg find simulinkDataTypeSet(port); // 
}

// Find ports with a data type
pattern simulinkDataTypeSet(port : Port) {
	Port.dataType(port, dataType);
	check (
		!dataType.empty
	);
}
