/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.eclipse.org/uml2/5.0.0/UML"

/*
 * Guideline			av_0017: Use of UML fork and join pseudostates
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				UML
 * 
 * Prerequisites		Guideline av_0013: Naming of UML and join pseudostates
 * 
 * Description		When using fork and join pseudostates, every parallel path from the fork pseudostate to the join pseudostate has only one composite state.
 * 
 * Rationale			This guideline is intended to reduce ambiguities when mapping a UML state machine and a Stateflow chart.
 */

@Constraint(targetEditorId = "org.eclipse.uml2.uml.editor.presentation.UMLEditorID",
	severity = "error",
	message = "[av_0017] Every parallel path between fork and join pseudostates $fork$ must contain only one composite state.",
	key = {fork}
) // Find fork and join pseudostates with incorrect usage
pattern umlForkJoinIncorrectUsage(fork : Pseudostate, join : Pseudostate, compositeState : State) {
	Pseudostate.kind(fork, ::fork);
    Pseudostate.kind(join, ::join);
    Pseudostate.container(fork, region);
    Pseudostate.container(join, region);
    State.container(compositeState, region);
    Pseudostate.name(fork, name);
    Pseudostate.name(join, name);
	neg find umlParallelPath(fork, join, compositeState);
}

/* Fix: Query those parallel paths with more than one state */

// Find composite states in the parallel paths spawned between the fork and join pseudostates
pattern umlParallelPath(fork : Pseudostate, join : Pseudostate, compositeState : State) {
	Pseudostate.kind(fork, ::fork);
	Pseudostate.kind(join, ::join);
    Pseudostate.name(fork, name);
    Pseudostate.name(join, name);
	Transition.source(transition1, fork);
	Transition.target(transition1, compositeState);
	find stateIsComposite(compositeState, true);
	Transition.source(transition2, compositeState);
	Transition.target(transition2, join);
}

// Find composite states
//@Surrogate(feature = "isComposite")
pattern stateIsComposite(state : State, isComposite : java Boolean) {
    find stateIsComposite_0(state, _region);
    isComposite == true;
} or {
    neg find stateIsComposite_0(state, _region);
    isComposite == false;
}

private pattern stateIsComposite_0(state : State, region : Region) {
    State.region(state, region);
}