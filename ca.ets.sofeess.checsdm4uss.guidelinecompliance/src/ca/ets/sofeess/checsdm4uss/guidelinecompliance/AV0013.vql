/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.eclipse.org/uml2/5.0.0/UML"

/*
 * Guideline			av_0013: Expression of UML actions
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				UML
 * 
 * Prerequisites		None
 * 
 * Description		UML actions on entry, do and exit behaviours for states and on transitions must be defined as sequences of UML Operation calls. 
 * 					Stateflow actions on entry, do and exit behaviours for states and on transitions must be defined as sequences of variable assignment statements. 
 * 					If the actions appear in a UML state machine as well, then the variable names must be subsets of the UML operation names used.
 * 
 * Rationale			This guideline is intended to allow a mapping to be established between a UML state machine and a Stateflow chart.
 * 
 * See Also			UML 2.5.1 subclause 16.1.1.1 Concrete Syntax
 * 					UML 2.5.1 subclause 7.6.4 Notation (OpaqueExpression)
 */

@Constraint(targetEditorId = "org.eclipse.uml2.uml.editor.presentation.UMLEditorID",
	severity = "error",
	message = "[av_0013] UML actions on entry, do and exit behaviours for states and on transitions must be defined as sequences of UML Operation calls.",
	key = {transition}
) // Find actions with an invalid format
pattern umlActionFormatInvalid(transition : Transition, action : FunctionBehavior, statement : java String) {
    Transition.effect(transition, action);
    FunctionBehavior.body(action, statement);
    check(
    		!statement.matches("[a-zA-Z]+\\(.*\\)") // the expression is not an operation call
    );
}
