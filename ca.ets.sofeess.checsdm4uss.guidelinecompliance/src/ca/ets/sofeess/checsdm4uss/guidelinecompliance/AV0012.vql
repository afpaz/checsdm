/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.etsmtl.ca/sofeess/breesse/simulink/1.0"

/*
 * Guideline			av_0012: Expression of Stateflow conditions in transitions
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				Stateflow
 * 
 * Prerequisites		None
 * 
 * Description		Stateflow conditions in transitions must be defined as logical expressions made up of a primary expression, or a conjunction or disjunction of two 
 * 					or more	primary expressions. A primary expression is defined to be 
 * 					(1) a Boolean input or local variable, or 
 * 					(2) a relational expression containing one relational operator (<,<=, >, >=, !=, ∼=, ==, ∼, !).
 * 
 * Rationale			This guideline is intended to allow a mapping to be established between a UML state machine and a Stateflow chart.
 */

@Constraint(targetEditorId = "ca.ets.sofeess.breesse.simulink.presentation.SimulinkEditorID",
	severity = "error",
	message = "[av_0012] The guard must be defined as a logical expression made up of a primary expression, or a conjunction or disjunction of two or more primary expressions. A primary expression is defined to be one of the following: (1) a Boolean input or local variable, or (2) a relational expression containing one relational operator (<, <=, >, >=, !=, ∼=, ==, ∼, !).",
	key = {guard}
) // Find guards with an invalid format
pattern stateflowGuardFormatInvalid(guard : SFWTrigger, statement : java String) {
    SFWTrigger.statement(guard, statement);
    check( // The guard is not a logical expression made up of a primary expression, nor a conjunction or disjunction of two or more primary expressions
    		!statement.matches("\\[((~|!)?[a-zA-Z_]+\\d*(\\(\\d*\\))?(\\s?(<|<=|>|>=|!=|~=|==)\\s?((\\d+)|((~|!)?[a-zA-Z_]+\\d*(\\(\\d*\\))?)))?(\\s?(&&|(\\|\\|)|&|\\|)\\s?(~|!)?[a-zA-Z_]+\\d*(\\(\\d*\\))?(\\s?(<|<=|>|>=|!=|~=|==)\\s?((\\d+)|((~|!)?[a-zA-Z_]+\\d*(\\(\\d*\\))?)))?)*)|([a-zA-Z_]+\\(.*\\))\\]")
    ); // primary expression: a Boolean input or local variable, or a relational expression containing one relational operator (<,<=, >, >=, !=, ∼=, ==, ∼, !)
}
