/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.eclipse.org/uml2/5.0.0/UML"

/*
 * Guideline			av_0011: Expression of UML guards in transitions
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				UML
 * 
 * Prerequisites		None
 * 
 * Description		UML guards in transitions must be defined as logical expressions made up of a primary expression, or a conjunction or disjunction of two or more 
 * 					primary expressions. A primary expression is defined to be a relational expression containing one relational operator (<, <=, >, >=, !=, ∼=, ==, ∼, !).
 * 
 * Rationale			The UML specification defines a guard as an OpaqueExpression. Only certain constraints are predefined in UML. Thus, this guideline borrows the 
 * 					Stateflow notation for the expression of guards in UML to facilitate their mapping.
 */

@Constraint(targetEditorId = "org.eclipse.uml2.uml.editor.presentation.UMLEditorID",
	severity = "error",
	message = "[av_0011] Transition $transition$ must have a guard defined as a logical expression made up of a primary expression, or a conjunction or disjunction of two or more primary expressions. A primary expression is defined to be a relational expression containing one relational operator (<, <=, >, >=, !=, ∼=, ==, ∼, !).",
	key = {transition}
) // Find guards with an invalid format
pattern umlGuardFormatInvalid(transition : Transition, constraint : Constraint, specification : OpaqueExpression, statement : java String) {
    Transition.guard(transition, constraint);
    Constraint.specification(constraint, specification);
    OpaqueExpression.body(specification, statement);
    check( // The guard is not a logical expression made up of a primary expression, nor a conjunction or disjunction of two or more primary expressions
    		!statement.matches("((~|!)?([a-zA-Z]+\\.)?[a-zA-Z]+\\d*(\\(\\d*\\))?(\\[\\d+\\])?(\\s?(<|<=|>|>=|!=|~=|==)\\s?((\\d+)|((~|!)?([a-zA-Z]+\\.)?[a-zA-Z]+\\d*(\\(\\d*\\))?(\\[\\d+\\])?)))?(\\s?(&&|(\\|\\|))\\s?(~|!)?([a-zA-Z]+\\.)?[a-zA-Z]+\\d*(\\(\\d*\\))?(\\[\\d+\\])?(\\s?(<|<=|>|>=|!=|~=|==)\\s?((\\d+)|((~|!)?([a-zA-Z]+\\.)?[a-zA-Z]+\\d*(\\(\\d*\\))?(\\[\\d+\\])?)))?)*)|(([a-zA-Z]+\\.)?[a-zA-Z]+\\(.*\\))")
    ); // primary expression: a relational expression containing one relational operator (<,<=, >, >=, !=, ∼=, ==, ∼, !)
}
