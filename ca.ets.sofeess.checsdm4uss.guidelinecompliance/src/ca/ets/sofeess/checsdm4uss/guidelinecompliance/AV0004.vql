/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.eclipse.org/uml2/5.0.0/UML"

/*
 * Guideline			av_0004: Naming of UML fork and join pseudostates
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				UML
 * 
 * Prerequisites		None
 * 
 * Description		The names of UML fork and join pseudostates must be the same.
 * 
 * Rationale			Sharing the same name root facilitates their matching to an equivalent Stateflow construct.
 * 
 * See Also			Guideline av_0015: Fork and join behaviour in Stateflow
 */

@Constraint(targetEditorId = "org.eclipse.uml2.uml.editor.presentation.UMLEditorID",
	severity = "error",
	message = "[av_0004] The names $fork$ and $join$ must be the same.",
	key = {join}
) // Find fork and join pseudostates with invalid naming
pattern umlForkJoinInvalid(fork : Pseudostate, join : Pseudostate) {
	Pseudostate.kind(fork, ::fork);
    Pseudostate.kind(join, ::join);
    Pseudostate.container(fork, region);
    Pseudostate.container(join, region);
    Pseudostate.name(fork, forkName);
    Pseudostate.name(join, joinName);
	neg find umlForkJoinValid(fork, join);
	check (
		!forkName.equals(joinName) // the names are not the same
	);
}

// Find valid fork and join pseudostates
pattern umlForkJoinValid(fork : Pseudostate, join : Pseudostate) {
    Pseudostate.kind(fork, ::fork);
    Pseudostate.kind(join, ::join);
    Pseudostate.container(fork, region);
    Pseudostate.container(join, region);
    find umlForkJoinConnected+(fork, join); // the fork and join pseudostates are connected indirectly through transitions
}

// Find transitions connecting the fork and join pseudostates
pattern umlForkJoinConnected(fork : Pseudostate, join : Pseudostate) {
    Pseudostate.kind(fork, ::fork);
    Pseudostate.kind(join, ::join);
    //Pseudostate.outgoing(fork, transition);
    find vertexOutgoingTransition(fork, transition);
    Transition.target(transition, join);
}

// Find outgoing transitions of a vertex
//@Surrogate(feature = "outgoing")
pattern vertexOutgoingTransition(vertex : Vertex, transition : Transition) {
	Transition.source(transition, vertex);
}
