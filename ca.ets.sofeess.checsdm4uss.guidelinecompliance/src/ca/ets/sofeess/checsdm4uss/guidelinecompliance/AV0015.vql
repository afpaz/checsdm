/*
 * Copyright (c) 2016-2019 ÉTS
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     https://www.apache.org/licenses/LICENSE-2.0
 *     
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 

/**
 * @author: Andrés Paz
 */

package ca.ets.sofeess.checsdm4uss.guidelinecompliance

import "http://www.etsmtl.ca/sofeess/checsdm/mappings/1.0"
import "http://www.eclipse.org/uml2/5.0.0/UML"
import "http://www.etsmtl.ca/sofeess/breesse/simulink/1.0"

/*
 * Guideline			av_0015: Expression of UML and Stateflow actions
 * (ID: Title)
 * 
 * Priority			Mandatory
 * 
 * Scope				UML and Stateflow
 * 
 * Prerequisites		None
 * 
 * Description		If an action appears in both a UML state machine and a Stateflow chart, then the Stateflow variable name must be subset of the UML 
 * 					operation name used.
 * 
 * Rationale			This guideline is intended to allow a mapping to be established between a UML state machine and a Stateflow chart.
 */

@Constraint(targetEditorId = "ca.ets.sofeess.checsdm.mappings.presentation.MappingsEditorID",
	severity = "warning",
	message = "[av_0015] The Stateflow triggered action must be a subset of the UML operation name.",
	key = {mapping}
) // Find actions that have not been mapped possibly due to having invalid formats
pattern matchingActionInvalid(mapping : Mapping, umlEffect : Behavior, sfwAction : Action) {
 	Mapping.left(mapping, umlEffect); // left side is a UML effect (action)
 	Mapping.right(mapping, sfwAction); // right side is a Stateflow action
 	Mapping.matching(mapping, false); // the actions are not mapped
 	Behavior.name(umlEffect, functionName);
 	Action.statement(sfwAction, actionStatement);
 	check(
 		!functionName.contains(actionStatement.substring(0, actionStatement.indexOf("=") - 1).trim()) // the actions are not equivalent 
 	);
}
